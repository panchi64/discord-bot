package api.discord;

import api.discord.features.TextualTriggers;
import api.discord.helper.TriggerReader;
import discord4j.core.DiscordClient;
import discord4j.core.GatewayDiscordClient;
import discord4j.core.event.domain.Event;
import io.github.cdimascio.dotenv.Dotenv;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import reactor.core.publisher.Mono;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;

public class Main {
    /**
     * Gets the Discord API token saved within a .env file
     *
     * @return API token from .env file
     */
    private static String envGetToken() {
        Dotenv dotenv = Dotenv.configure().directory("src/files").load();
        return dotenv.get("TOKEN");
    }

    /**
     * Initializes the Discord Client
     */
    public static void init() {
//        Sets everything up before starting a connection to Discord.
        final Logger logger = LoggerFactory.getLogger(Main.class);

        TextualTriggers textualTrigger = new TextualTriggers();
        try {
//            Generates the HashMap for triggers or a new file depending on if the file has been found or not.
            File triggersFile = new File("src/files/triggers.txt");
            boolean newFileCreated = triggersFile.createNewFile();

            if (!newFileCreated) {
                logger.debug("Triggers file was found, saving triggers to memory...");
                textualTrigger.setTriggers(TriggerReader.generateMap("src/files/triggers.txt"));
            } else {
                logger.debug("Triggers file was not found, one has been autogenerated.");
            }
        } catch (FileNotFoundException fileNotFoundException) {
            logger.error("Triggers file was not found, it has been autogenerated in the files directory.", fileNotFoundException);
        } catch (IOException ioException) {
            logger.error("System has failed in creating a new file.", ioException);
        }

        String TOKEN = envGetToken();
        DiscordClient client = DiscordClient.create(TOKEN);

        Mono<Void> login = client.withGateway(
                (GatewayDiscordClient gateway) -> gateway.on(
                        Event.class, event -> EventHandler.categorizeEvent(event, textualTrigger)
                )
        );
        login.block();
    }
}